cmake_minimum_required(VERSION 3.5)
project(navio_vendor)

# Default to C99
if(NOT CMAKE_C_STANDARD)
  set(CMAKE_C_STANDARD 99)
endif()

# Default to C++14
if(NOT CMAKE_CXX_STANDARD)
  set(CMAKE_CXX_STANDARD 14)
endif()

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

# find dependencies
find_package(ament_cmake REQUIRED)
# uncomment the following section in order to fill in
# further dependencies manually.
# find_package(<dependency> REQUIRED)

file(GLOB common_sources "src/Common/*.cpp")
file(GLOB navio_sources "src/Navio+/*.cpp")
file(GLOB navio2_sources "src/Navio2/*.cpp")
file(GLOB examples_sources "src/Examples/*.cpp")

add_executable(ahrs src/Examples/AHRS.cpp)

add_library(navio_vendor
  ${common_sources}
  ${navio_sources}
  ${navio2_sources}
  ${examples_sources}
)

add_library(common ${common_sources})
add_library(navio ${navio_sources})
add_library(navio2 ${navio2_sources})
add_library(examples ${examples_sources})

target_include_directories(common
  PUBLIC
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/Common>
    $<INSTALL_INTERFACE:include>)


target_include_directories(navio
PUBLIC
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/Navio+>
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
    $<INSTALL_INTERFACE:include>)

      
target_include_directories(navio2
PUBLIC
  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/Navio2>
  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
  $<INSTALL_INTERFACE:include>)


target_include_directories(examples
PUBLIC
  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/Examples>
  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
  $<INSTALL_INTERFACE:include>)


target_include_directories(navio_vendor
PUBLIC
  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/Common>
  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/Navio+>
  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/Navio2>
  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/Examples>
  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
  $<INSTALL_INTERFACE:include>)

target_link_libraries(ahrs 
    common
    navio
    navio2
    examples
)

ament_export_interfaces(export_navio_vendor)

install(TARGETS
    common
    # EXPORT export_navio_vendor
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
    RUNTIME DESTINATION bin
    INCLUDES DESTINATION include
)

install(TARGETS
    navio
    # EXPORT export_navio_vendor
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
    RUNTIME DESTINATION bin
    INCLUDES DESTINATION include
)

install(TARGETS
    navio2
    EXPORT export_navio_vendor
    # DESTINATION lib/${PROJECT_NAME}
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
    RUNTIME DESTINATION bin
    INCLUDES DESTINATION include
)

install(TARGETS
    examples
    # EXPORT export_navio_vendor
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
    RUNTIME DESTINATION bin
    INCLUDES DESTINATION include
)

install(TARGETS
    ahrs
    DESTINATION lib/${PROJECT_NAME}
)

if(BUILD_TESTING)
  find_package(ament_lint_auto REQUIRED)
  # the following line skips the linter which checks for copyrights
  # uncomment the line when a copyright and license is not present in all source files
  #set(ament_cmake_copyright_FOUND TRUE)
  # the following line skips cpplint (only works in a git repo)
  # uncomment the line when this package is not in a git repo
  #set(ament_cmake_cpplint_FOUND TRUE)
  ament_lint_auto_find_test_dependencies()
endif()

# ament_export_interfaces(export_my_library
#     common
#     navio
#     navio2
#     examples
# )
# # # ament_export_dependencies(some_dependency)

# install(
#   DIRECTORY include/
#   DESTINATION include
# )

# install(
#   TARGETS my_library
#   EXPORT export_my_library
#   LIBRARY DESTINATION lib
#   ARCHIVE DESTINATION lib
#   RUNTIME DESTINATION bin
#   INCLUDES DESTINATION include
# )

ament_package()

install(
  DIRECTORY include/
  DESTINATION include
)

install(TARGETS
    navio_vendor
    EXPORT export_navio_vendor
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
    RUNTIME DESTINATION bin
    INCLUDES DESTINATION include
)

